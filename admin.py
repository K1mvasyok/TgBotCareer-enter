from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

import keyboards as kb
from config import ADMIN_TELEGRAM_ID
from requests import get_users_by_course
from run import get_bot

router_a = Router()

@router_a.message(Command("commands"))
async def Cmd_commands(message: Message):
    if message.from_user.id == ADMIN_TELEGRAM_ID:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç üëãüèº,\n–Ø - —á–∞—Ç-–±–æ—Ç \n\n'
                             f'–ß–µ—Ä–µ–∑ –º–µ–Ω—è –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å ?—Å–æ–æ–±—â–µ–Ω–∏–µ?: \n\n'
                             f'‚Ä¢ –ö—É—Ä—Å—É\n\n'
                             f'‚Ä¢ –ü–æ—Ç–æ–∫—É\n\n'
                             f'‚Ä¢ –ò–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ\n\n')
        await message.answer(f'üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu_a())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –†–∞–±–æ—Ç–∞ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ö—É—Ä—Å—É
@router_a.message(F.text == 'üìñ –ö—É—Ä—Å')
async def Kurs(message: Message):
    if message.from_user.id == ADMIN_TELEGRAM_ID:
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å', reply_markup=await kb.kurs())  
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@router_a.callback_query(F.data.startswith("mes.kurs.number_"))
@router_a.callback_query(F.data.startswith("kurs.number_"))
async def Kurs_bottons_act(query: CallbackQuery):
    kurs_id = int(query.data.split("_")[1])
    await query.message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ö—É—Ä—Å–∞', reply_markup=await kb.ready(kurs_id))  
    
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_message_to_user(user_id, message_text):
    bot = await get_bot()
    try:
        await bot.send_message(user_id, message_text)
        return True  
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}: {e}")
        return False   
    
@router_a.callback_query(F.data.startswith("kurs.ready"))
async def Kurs_ready_act(query: CallbackQuery):
    kurs_id = int(query.data.split("_")[1])
    
    users = await get_users_by_course(kurs_id)
    
    if users:
            message_text = query.message.text
            await send_message_to_user(users, message_text)
            await query.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫—É—Ä—Å–∞")
    else:
            await query.message.answer("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")


# –†–∞–±–æ—Ç–∞ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ì—Ä—É–ø–ø–µ