from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import keyboards as kb
from config import ADMIN_TELEGRAM_ID
from requests import get_users_by_course, get_students_by_course_and_direction, get_users_by_group_id
from run import get_bot

router_a = Router()

class TextForKurs(StatesGroup):
    kurs = State()
    text = State()
    
class TextForPotok(StatesGroup):
    kurs = State()
    potok_id = State()
    text = State()
    
class TextForGroup(StatesGroup):
    kurs = State()
    potok_id = State()
    group_id = State()    
    text = State()       

@router_a.message(Command("commands"))
async def Cmd_commands(message: Message):
    if message.from_user.id == ADMIN_TELEGRAM_ID:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç üëãüèº,\n–Ø - —á–∞—Ç-–±–æ—Ç \n\n'
                             f'–ß–µ—Ä–µ–∑ –º–µ–Ω—è –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å ?—Å–æ–æ–±—â–µ–Ω–∏–µ?: \n\n'
                             f'‚Ä¢ –ö—É—Ä—Å—É\n\n'
                             f'‚Ä¢ –ü–æ—Ç–æ–∫—É\n\n'
                             f'‚Ä¢ –ò–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ\n\n')
        await message.answer(f'üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu_a())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –†–∞–±–æ—Ç–∞ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ö—É—Ä—Å—É
@router_a.message(F.text == 'üìñ –ö—É—Ä—Å')
async def Kurs(message: Message, state: FSMContext):
    if message.from_user.id == ADMIN_TELEGRAM_ID:
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å', reply_markup=await kb.kurs())  
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@router_a.callback_query(F.data.startswith("kurs.number_"))
async def Kurs_bottons_act(query: CallbackQuery, state: FSMContext):
    kurs_id = int(query.data.split("_")[1])
    await state.update_data(kurs=kurs_id) 
    await query.message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ö—É—Ä—Å–∞')     
    await state.set_state(TextForKurs.text)     
    
@router_a.message(TextForKurs.text)
async def Kurs_text_act(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    kurs_id = data["kurs"]    
    await message.answer(data["text"], reply_markup=await kb.ready_kurs(kurs_id))  
    
@router_a.callback_query(F.data.startswith("kurs.ready_"))
async def Kurs_ready_act(query: CallbackQuery, state: FSMContext):
    kurs_id = int(query.data.split("_")[1])
    data = await state.get_data()
    message_text = data["text"]
    users = await get_users_by_course(kurs_id)
    if users:
            for user in users:
                await send_message_to_user(user.telegram_id, message_text)
            await query.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫—É—Ä—Å–∞")
    else:
            await query.message.answer("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    await state.clear()

# –†–∞–±–æ—Ç–∞ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ü–æ—Ç–æ–∫—É
@router_a.message(F.text == 'üéì –ü–æ—Ç–æ–∫')
async def Potok(message: Message, state: FSMContext):
    if message.from_user.id == ADMIN_TELEGRAM_ID:
        await message.answer(f'–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ—Ç–æ–∫, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å', reply_markup=await kb.potok_kurs())  
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@router_a.callback_query(F.data.startswith("potok.kurs.number_"))
async def Potok_bottons_act(query: CallbackQuery, state: FSMContext):
    kurs_id = int(query.data.split("_")[1])
    await state.update_data(kurs=kurs_id)        
    await query.message.answer(f'–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ—Ç–æ–∫', reply_markup=await kb.direction_for_curs(kurs_id))          

@router_a.callback_query(F.data.startswith("potok.direction_"))
async def Potok_text_act(query: CallbackQuery, state: FSMContext):
    potok = int(query.data.split("_")[1])
    await state.update_data(potok_id=potok)       
    await query.message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ü–æ—Ç–æ–∫–∞')
    await state.set_state(TextForPotok.text)    

@router_a.message(TextForPotok.text)
async def Kurs_text_act(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    potok_id = data["potok_id"]  
    await message.answer(data['text'], reply_markup=await kb.ready_direction(potok_id))   

@router_a.callback_query(F.data.startswith("potok.ready_"))
async def Potok_ready_act(query: CallbackQuery, state: FSMContext):
    potok_id = int(query.data.split("_")[1])
    data = await state.get_data()
    message_text = data["text"]
    course_id = data["kurs"]
    users = await get_students_by_course_and_direction(course_id, potok_id)
    if users:
        for user in users:
            await send_message_to_user(user.telegram_id, message_text)
        await query.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Ç–æ–∫–∞")
    else:
        await query.message.answer("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    await state.clear()

# –†–∞–±–æ—Ç–∞ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ì—Ä—É–ø–ø–µ
@router_a.message(F.text == 'üìö –ì—Ä—É–ø–ø–∞')
async def Group(message: Message, state: FSMContext):
    if message.from_user.id == ADMIN_TELEGRAM_ID:
        await message.answer(f'–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å', reply_markup=await kb.kurs_group())  
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@router_a.callback_query(F.data.startswith("group.number_"))
async def Group_bottons_act(query: CallbackQuery, state: FSMContext):
    kurs_id = int(query.data.split("_")[1])
    await state.update_data(kurs=kurs_id)        
    await query.message.answer(f'–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ—Ç–æ–∫', reply_markup=await kb.group_direction_for_curs(kurs_id)) 

@router_a.callback_query(F.data.startswith("group.direction_"))
async def Group_2bot_act(query: CallbackQuery, state: FSMContext):
    potok = int(query.data.split("_")[1])
    await state.update_data(potok_id=potok) 
    data = await state.get_data()
    kurs = data["kurs"]      
    await query.message.answer(f'–í—ã–±–µ—Ä–µ—Ç–µ –≥—Ä—É–ø–ø—É', reply_markup=await kb.generate_group_keyboard(kurs, potok))     
    
@router_a.callback_query(F.data.startswith("group.group_"))
async def Group_text_act(query: CallbackQuery, state: FSMContext):
    group_id = int(query.data.split("_")[1])
    await state.update_data(group_id=group_id)       
    await query.message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ì—Ä—É–ø–ø—ã')
    await state.set_state(TextForGroup.text)    

@router_a.message(TextForGroup.text)
async def Group_text_do(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    group_id = data["group_id"]  
    await message.answer(data['text'], reply_markup=await kb.ready_group(group_id))   

@router_a.callback_query(F.data.startswith("group.ready_"))
async def Group_ready_act(query: CallbackQuery, state: FSMContext):
    group_id = int(query.data.split("_")[1])
    data = await state.get_data()
    message_text = data["text"]
    users = await get_users_by_group_id(group_id)
    if users:
        for user in users:
            await send_message_to_user(user.telegram_id, message_text)
        await query.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≥—Ä—É–ø–ø—ã")
    else:
        await query.message.answer("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    await state.clear()
        
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_message_to_user(user_id, message_text):
    bot = await get_bot()
    try:
        await bot.send_message(user_id, message_text)
        return True  
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}: {e}")
        return False   