from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router_u = Router()

import keyboards as kb
from requests import is_user_registered_db, save_user_to_db, get_user_data

class AddNewUser(StatesGroup):
    kurs = State()
    direction = State()
    group = State()
    telegram_id = State()

@router_u.message(CommandStart())
async def Cmd_start(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç üëãüèº,\n–Ø - —á–∞—Ç-–±–æ—Ç \n\n'
                             f'–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å: \n\n'
                             f'‚Ä¢ \n\n')
    await message.answer(f'üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu())

@router_u.message(F.text == 'üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def Cmd_register(message: Message, state: FSMContext) -> None: 
    user_id = message.from_user.id
    if await is_user_registered_db(user_id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å", reply_markup=await kb.kurs_registration())
        
@router_u.callback_query(F.data.startswith("reg.kurs.number_"))
async def Process_kurs(query: CallbackQuery, state: FSMContext):

    kurs = int(query.data.split("_")[1])
    await query.message.answer(f'Kurs - {kurs}')
    
    await state.update_data(kurs=kurs)
    
    await query.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", reply_markup=await kb.kurs_registration())

@router_u.message(AddNewUser.fio_klient)
async def process_fio(message: Message, state: FSMContext) -> None:
    await state.update_data(fio_klient=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å.")
    await state.set_state(AddNewUser.adress)

@router_u.message(AddNewUser.adress)
async def process_address(message: Message, state: FSMContext) -> None:
    await state.update_data(address=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏")
    await state.set_state(AddNewUser.phone_number)

@router_u.message(AddNewUser.phone_number)
async def process_phone(message: Message, state: FSMContext) -> None:
    await state.update_data(phone_number=message.text)
    data = await state.get_data()
    message_text = (
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
        f"–ü–∞—Å–ø–æ—Ä—Ç: <b>{data['passport']}</b>\n"
        f"–§–ò–û: <b>{data['fio_klient']}</b>\n"
        f"–ê–¥—Ä–µ—Å: <b>{data['address']}</b>\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{data['phone_number']}</b>\n\n"
        f"–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É")
    await message.answer(message_text, reply_markup=await kb.register_user())

@router_u.callback_query(F.data.startswith("register"))
async def register_user(query: CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    data = await state.get_data()
    await save_user_to_db(query.from_user.id, data)
    await state.clear()
    await query.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")
    await query.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await kb.menu(user_id, is_user_registered_db))
    
@router_u.message(F.text == 'üìã –ú–æ—è –∞–Ω–∫–µ—Ç–∞')
async def view_profile(message: Message):
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)
    if user_data:
        profile_text = (
            f"üìã –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n"
            f"–ü–∞—Å–ø–æ—Ä—Ç: <b>{user_data.passport}</b>\n"
        )
        await message.answer(profile_text, reply_markup=await kb.menu(user_id))
    else:
        await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")